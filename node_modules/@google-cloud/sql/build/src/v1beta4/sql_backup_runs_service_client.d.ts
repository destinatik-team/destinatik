import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, LocationsClient, LocationProtos } from 'google-gax';
import * as protos from '../../protos/protos';
/**
 * @class
 * @memberof v1beta4
 */
export declare class SqlBackupRunsServiceClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    private _universeDomain;
    private _servicePath;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    locationsClient: LocationsClient;
    sqlBackupRunsServiceStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of SqlBackupRunsServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new SqlBackupRunsServiceClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    get apiEndpoint(): string;
    get universeDomain(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Deletes the backup taken by a backup run.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {number} request.id
     *   The ID of the backup run to delete. To find a backup run ID, use the
     *   [list](https://cloud.google.com/sql/docs/mysql/admin-api/rest/v1beta4/backupRuns/list)
     *   method.
     * @param {string} request.instance
     *   Cloud SQL instance ID. This does not include the project ID.
     * @param {string} request.project
     *   Project ID of the project that contains the instance.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.sql.v1beta4.Operation|Operation}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta4/sql_backup_runs_service.delete.js</caption>
     * region_tag:sqladmin_v1beta4_generated_SqlBackupRunsService_Delete_async
     */
    delete(request?: protos.google.cloud.sql.v1beta4.ISqlBackupRunsDeleteRequest, options?: CallOptions): Promise<[
        protos.google.cloud.sql.v1beta4.IOperation,
        protos.google.cloud.sql.v1beta4.ISqlBackupRunsDeleteRequest | undefined,
        {} | undefined
    ]>;
    delete(request: protos.google.cloud.sql.v1beta4.ISqlBackupRunsDeleteRequest, options: CallOptions, callback: Callback<protos.google.cloud.sql.v1beta4.IOperation, protos.google.cloud.sql.v1beta4.ISqlBackupRunsDeleteRequest | null | undefined, {} | null | undefined>): void;
    delete(request: protos.google.cloud.sql.v1beta4.ISqlBackupRunsDeleteRequest, callback: Callback<protos.google.cloud.sql.v1beta4.IOperation, protos.google.cloud.sql.v1beta4.ISqlBackupRunsDeleteRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Retrieves a resource containing information about a backup run.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {number} request.id
     *   The ID of this backup run.
     * @param {string} request.instance
     *   Cloud SQL instance ID. This does not include the project ID.
     * @param {string} request.project
     *   Project ID of the project that contains the instance.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.sql.v1beta4.BackupRun|BackupRun}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta4/sql_backup_runs_service.get.js</caption>
     * region_tag:sqladmin_v1beta4_generated_SqlBackupRunsService_Get_async
     */
    get(request?: protos.google.cloud.sql.v1beta4.ISqlBackupRunsGetRequest, options?: CallOptions): Promise<[
        protos.google.cloud.sql.v1beta4.IBackupRun,
        protos.google.cloud.sql.v1beta4.ISqlBackupRunsGetRequest | undefined,
        {} | undefined
    ]>;
    get(request: protos.google.cloud.sql.v1beta4.ISqlBackupRunsGetRequest, options: CallOptions, callback: Callback<protos.google.cloud.sql.v1beta4.IBackupRun, protos.google.cloud.sql.v1beta4.ISqlBackupRunsGetRequest | null | undefined, {} | null | undefined>): void;
    get(request: protos.google.cloud.sql.v1beta4.ISqlBackupRunsGetRequest, callback: Callback<protos.google.cloud.sql.v1beta4.IBackupRun, protos.google.cloud.sql.v1beta4.ISqlBackupRunsGetRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates a new backup run on demand.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.instance
     *   Cloud SQL instance ID. This does not include the project ID.
     * @param {string} request.project
     *   Project ID of the project that contains the instance.
     * @param {google.cloud.sql.v1beta4.BackupRun} request.body
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.sql.v1beta4.Operation|Operation}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta4/sql_backup_runs_service.insert.js</caption>
     * region_tag:sqladmin_v1beta4_generated_SqlBackupRunsService_Insert_async
     */
    insert(request?: protos.google.cloud.sql.v1beta4.ISqlBackupRunsInsertRequest, options?: CallOptions): Promise<[
        protos.google.cloud.sql.v1beta4.IOperation,
        protos.google.cloud.sql.v1beta4.ISqlBackupRunsInsertRequest | undefined,
        {} | undefined
    ]>;
    insert(request: protos.google.cloud.sql.v1beta4.ISqlBackupRunsInsertRequest, options: CallOptions, callback: Callback<protos.google.cloud.sql.v1beta4.IOperation, protos.google.cloud.sql.v1beta4.ISqlBackupRunsInsertRequest | null | undefined, {} | null | undefined>): void;
    insert(request: protos.google.cloud.sql.v1beta4.ISqlBackupRunsInsertRequest, callback: Callback<protos.google.cloud.sql.v1beta4.IOperation, protos.google.cloud.sql.v1beta4.ISqlBackupRunsInsertRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Lists all backup runs associated with the project or a given instance and
     * configuration in the reverse chronological order of the backup initiation
     * time.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.instance
     *   Cloud SQL instance ID, or "-" for all instances. This does not include
     *   the project ID.
     * @param {number} request.maxResults
     *   Maximum number of backup runs per response.
     * @param {string} request.pageToken
     *   A previously-returned page token representing part of the larger set of
     *   results to view.
     * @param {string} request.project
     *   Project ID of the project that contains the instance.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.sql.v1beta4.BackupRunsListResponse|BackupRunsListResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta4/sql_backup_runs_service.list.js</caption>
     * region_tag:sqladmin_v1beta4_generated_SqlBackupRunsService_List_async
     */
    list(request?: protos.google.cloud.sql.v1beta4.ISqlBackupRunsListRequest, options?: CallOptions): Promise<[
        protos.google.cloud.sql.v1beta4.IBackupRunsListResponse,
        protos.google.cloud.sql.v1beta4.ISqlBackupRunsListRequest | undefined,
        {} | undefined
    ]>;
    list(request: protos.google.cloud.sql.v1beta4.ISqlBackupRunsListRequest, options: CallOptions, callback: Callback<protos.google.cloud.sql.v1beta4.IBackupRunsListResponse, protos.google.cloud.sql.v1beta4.ISqlBackupRunsListRequest | null | undefined, {} | null | undefined>): void;
    list(request: protos.google.cloud.sql.v1beta4.ISqlBackupRunsListRequest, callback: Callback<protos.google.cloud.sql.v1beta4.IBackupRunsListResponse, protos.google.cloud.sql.v1beta4.ISqlBackupRunsListRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets information about a location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Resource name for the location.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const [response] = await client.getLocation(request);
     * ```
     */
    getLocation(request: LocationProtos.google.cloud.location.IGetLocationRequest, options?: gax.CallOptions | Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>, callback?: Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>): Promise<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Lists information about the supported locations for this service. Returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   The resource that owns the locations collection, if applicable.
     * @param {string} request.filter
     *   The standard list filter.
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const iterable = client.listLocationsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     * ```
     */
    listLocationsAsync(request: LocationProtos.google.cloud.location.IListLocationsRequest, options?: CallOptions): AsyncIterable<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
